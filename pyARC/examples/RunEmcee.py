from pyATMO_dev import pyATMO
from pyARC_dev import pyARC
import numpy as np
import PrepDataset, InstallNamelistParameters
import pdb


"""
This module demonstrates how to run an emcee retrieval on the synthetic
dataset generated by the PrepDataset module. ATMO parameters are imported
from the InstallNamelistParameters module. Execution is:
>> import RunEmcee
>> RunEmcee.Main( nchains=1, nwalkers=100, nsteps=100, threads=3, ncorr_burn=0 )
"""


LOGG = InstallNamelistParameters.LOGG
TEQ = InstallNamelistParameters.TEQ
RPLANET = InstallNamelistParameters.RPLANET
RSTAR = InstallNamelistParameters.RSTAR
AAU = InstallNamelistParameters.AAU
MDH = InstallNamelistParameters.MDH
CORATIO = InstallNamelistParameters.CORATIO


TRANSMISSIONMODEL = PrepDataset.TRANSMISSIONMODEL
TRANSMISSIONDATA = PrepDataset.TRANSMISSIONDATA


def Main( nchains=1, nwalkers=100, nsteps=100, threads=1, ncorr_burn=0, nice=None ):

    # Initialise the ATMO and ARC objects:
    ATMO = pyATMO.ATMO()
    InstallNamelistParameters.Main( ATMO )
    if nice!=None:
        ATMO.nice = nice
    Retrieval = pyARC.ARC()
    Retrieval.ATMO = ATMO

    # Read in the data:
    Retrieval.TransmissionData = { 'G141':np.loadtxt( TRANSMISSIONDATA ) }

    # Specify the log likelihood for the retrieval:
    Retrieval.LogLikeFunc = pyARC.ModelLogLike.ClearChemEqTransmission

    # Specify the priors for the free parameters:
    Retrieval.Priors = { 'dRpRs':dRpRs_prior, 'Teff':Teff_prior, 'MdH':MdH_prior, \
                         'COratio':COratio_prior }

    # Specify random functions to draw initial walker positions from:
    Retrieval.InitParSampleFuncs = { 'dRpRs':dRpRs_init, 'Teff':Teff_init, \
                                     'MdH':MdH_init, 'COratio':COratio_init }

    # Run the Emcee sampler:
    Retrieval.RunEmcee( nchains=nchains, nwalkers=nwalkers, nsteps=nsteps, \
                        threads=threads, ncorr_burn=ncorr_burn )

    return None


# Priors for the free parameters:
def Uniform( y, l, u ):
    if ( y>=l )*( y<=u ):
        return 1./float( u-l )
    else:
        return -np.inf
def dRpRs_prior( y ):
    return Uniform( y, -0.1, 0.1 )
def Teff_prior( y ):
    return Uniform( y, 200., 4000. )
def MdH_prior( y ):
    return Uniform( y, -4, 4 )
def COratio_prior( y ):
    return Uniform( y, 0.1, 3.0 )


# Functions to draw random starting points for
# the emcee walkers:
def rfunc( nwalkers, l, u ):
    return l + (u-l)*np.random.random( nwalkers )
def dRpRs_init( nwalkers ):
    return rfunc( -0.00001, 0.00001 )
def Teff_init( nwalkers ):
    return rfunc( 200., 2000. )
def MdH_init( nwalkers ):
    return rfunc( -0.01, 0.01 )
def COratio_init( nwalkers ):
    return rfunc( 0.51, 0.61 )

